#!/usr/bin/python3

import bz2
from getpass import getpass
import hashlib
import os
import platform
import requests
import sys
import subprocess
import stat
import time

PATCH_MANIFEST = 'https://cdn.toontownrewritten.com/content/patchmanifest.txt'
CONTENT_MIRROR = 'http://download.toontownrewritten.com/patches/'
LOGIN_API = 'https://www.toontownrewritten.com/api/login?format=json'
RELEASE_NOTES_API = 'https://www.toontownrewritten.com/api/releasenotes?format=json'
HEADERS = {'Content-Type': 'application/x-www-form-urlencoded'}

OPTION_ENABLE_LOGGING = False
OPTION_USERNAME = None
OPTION_PASSWORD = None

def display_help():
    print("usage: {} [-l|--enable-logging] [-u|--username username] [-p|--password password]".format(sys.argv[0]))
    print("\t-l, --enable-logging  Allows the game to print log output to the console.")
    print("")
    print("\t-u, --username        Your account username. Requires -p/--password to be used.")
    print("\t-p, --password        Your account password. Requires -u/--username to be used.")
    print("")
    print("\t-h, --help            Displays this help message and exits.")

def get_latest_game_version():
    request = requests.get(RELEASE_NOTES_API, headers=HEADERS)
    if request.status_code != 200:
        # couldn't successfully connect to the API
        return None

    release_list = request.json()
    latest_version = release_list[0]["slug"]
    return latest_version

def get_sha1_hash(filename):
    BLOCK_SIZE = 65536
    hasher = hashlib.sha1()
    with open(filename, 'rb') as afile:
        buf = afile.read(BLOCK_SIZE)
        while len(buf) > 0:
            hasher.update(buf)
            buf = afile.read(BLOCK_SIZE)

    result = hasher.hexdigest()
    return result

def update_file(filename, manifest):
    if os.path.isfile(filename):
        if get_sha1_hash(filename) != manifest[filename]["hash"]:
            print("updating {}...".format(filename))
            file = requests.get(CONTENT_MIRROR + manifest[filename]["dl"], headers=HEADERS)
            with open(filename + '.bz2', 'wb') as zipped:
                zipped.write(file.content)
            with open(filename, 'wb') as newfile, open(filename + '.bz2', 'rb') as zipped:
                newfile.write(bz2.decompress(zipped.read()))
            os.remove(filename + ".bz2")
    else:
        print("downloading {}...".format(filename))
        file = requests.get(CONTENT_MIRROR + manifest[filename]["dl"], headers=HEADERS)
        with open(filename + '.bz2', 'wb') as zipped:
            zipped.write(file.content)
        with open(filename, 'wb') as newfile, open(filename + '.bz2', 'rb') as zipped:
            newfile.write(bz2.decompress(zipped.read()))
        os.remove(filename + ".bz2")

def check_for_updates():
    print("checking for game updates...")

    latest_version = get_latest_game_version()
    if latest_version != None:
        print("latest game version is {}".format(latest_version))

    manifest = requests.get(PATCH_MANIFEST, headers=HEADERS).json()

    operating_system = platform.system()
    if operating_system == 'Linux':
        files = ['libopenal.so.1', 'phase_3.mf', 'phase_3.5.mf', 'phase_4.mf',
                 'phase_5.mf', 'phase_5.5.mf', 'phase_6.mf', 'phase_7.mf',
                 'phase_8.mf', 'phase_9.mf', 'phase_10.mf', 'phase_11.mf',
                 'phase_12.mf', 'phase_13.mf', 'TTREngine', 'TTRGame.vlt',
                 'winter_decorations.mf', 'winter_music.mf', 'winter_snow.mf']
    else:
        print("\n{} is unsupported :(".format(operating_system))
        os._exit(0)

    for file in files:
        update_file(file, manifest)

    os.chmod('TTREngine', os.stat('TTREngine').st_mode | stat.S_IEXEC | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)

def login():
    params = {'username': username, 'password': password}

    try:
        response = requests.post(LOGIN_API, params=params, headers=HEADERS)
        if response.status_code != 200:
            print("error: could not connect to Toontown Rewritten's login API. (error {})".format(response.status_code))
            os._exit(0)
    except:
        print("error: could not successfully connect to Toontown Rewritten's API.")
        os._exit(0)

    response = response.json()

    if response["success"] == "false":
        print("login failed: {}".format(response["banner"]))
        os._exit(0)

    elif response["success"] == "delayed":
        print("game entrance delay detected")
        print("the server should have you ready to go in {} seconds.".format(response["eta"]))
        delay(response["queueToken"])

    elif response["success"] == "partial":
        print("enter the ToonGuard code that was just emailed to you.")
        guard = input("> ")
        auth_params = {'appToken': guard, 'authToken': response['responseToken']}
        response = requests.post(LOGIN_API, params=auth_params, headers=HEADERS).json()

        if response["success"] == "true":
            launch(response["cookie"], response["gameserver"])
        elif response["success"] == "delayed":
            print("game entrance delay detected")
            print("the server should have you ready to go in {} seconds.".format(response["eta"]))
            delay(response["queueToken"])
        else:
            print("login failed: {}".format(response["banner"]))
            os._exit(0)

    elif response["success"] == "true":
        launch(response["cookie"], response["gameserver"])

def launch(cookie, server):
    print("you're good to go. launching the game...")
    os.environ['TTR_PLAYCOOKIE'] = cookie
    os.environ['TTR_GAMESERVER'] = server

    if OPTION_ENABLE_LOGGING:
        subprocess.call('./TTREngine')
    else:
        subprocess.call('./TTREngine', stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)

    print("game closed, exiting the launcher...")

def delay(token):
    params = {'username': username, 'password': password, 'queueToken': token}
    delayed = True
    while delayed:
        time.sleep(2)
        print("still trying...")
        response = requests.post(LOGIN_API, params=params, headers=HEADERS).json()
        if response["success"] == "true":
            launch(response["cookie"], response["gameserver"])
            delayed = False
        else:
            print("launch failed: {}".format(response["banner"]))
            os._exit(0)

if __name__ == "__main__":
    print("ttr-linux-cli by reindeer-cafe, tgsm\n")

    # arg parsing
    for i in range(len(sys.argv)):
        # Displays usage information and exits
        if sys.argv[i] == "-h" or sys.argv[i] == "--help":
            display_help()
            os._exit(0)

        elif sys.argv[i] == "-u" or sys.argv[i] == "--username":
            try:
                OPTION_USERNAME = sys.argv[i + 1]
            except IndexError:
                print("error: -u/--username was passed, but no actual username was given.\n")
                display_help()
                os._exit(0)

        elif sys.argv[i] == "-p" or sys.argv[i] == "--password":
            try:
                OPTION_PASSWORD = sys.argv[i + 1]
            except IndexError:
                print("error: -p/--password was passed, but no actual password was given.\n")
                display_help()
                os._exit(0)

        elif sys.argv[i] == "-l" or sys.argv[i] == "--enable-logging":
            OPTION_ENABLE_LOGGING = True

    check_for_updates()
    print("game is up to date!\n")

    if not OPTION_USERNAME and not OPTION_PASSWORD:
        username = input("username: ")
        password = getpass("password: ")
    else:
        username = OPTION_USERNAME
        password = OPTION_PASSWORD

    login()
