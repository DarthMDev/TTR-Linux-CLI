#!/usr/bin/python3

import bz2
from getpass import getpass
import hashlib
import os
import platform
import requests
import sys
import subprocess
import stat
import time

PATCH_MANIFEST = 'https://cdn.toontownrewritten.com/content/patchmanifest.txt'
CONTENT_MIRROR = 'https://s3.amazonaws.com/download.toontownrewritten.com/patches/'
LOGIN_API = 'https://www.toontownrewritten.com/api/login?format=json'
HEADERS = {'Content-Type': 'application/x-www-form-urlencoded'}

def get_sha1_hash(filename):
    BLOCK_SIZE = 65536
    hasher = hashlib.sha1()
    with open(filename, 'rb') as afile:
        buf = afile.read(BLOCK_SIZE)
        while len(buf) > 0:
            hasher.update(buf)
            buf = afile.read(BLOCK_SIZE)

    result = hasher.hexdigest()
    return result

def update_file(filename, manifest):
    if os.path.isfile(filename):
        if get_sha1_hash(filename) != manifest[filename]["hash"]:
            print("updating {}...".format(filename))
            file = requests.get(CONTENT_MIRROR + manifest[filename]["dl"], headers=HEADERS)
            with open(filename + '.bz2', 'wb') as zipped:
                zipped.write(file.content)
            with open(filename, 'wb') as newfile, open(filename + '.bz2', 'rb') as zipped:
                newfile.write(bz2.decompress(zipped.read()))
            os.remove(filename + ".bz2")
    else:
        print("downloading {}...".format(filename))
        file = requests.get(CONTENT_MIRROR + manifest[filename]["dl"], headers=HEADERS)
        with open(filename + '.bz2', 'wb') as zipped:
            zipped.write(file.content)
        with open(filename, 'wb') as newfile, open(filename + '.bz2', 'rb') as zipped:
            newfile.write(bz2.decompress(zipped.read()))
        os.remove(filename + ".bz2")

def check_for_updates():
    print("checking for game updates...")

    manifest = requests.get(PATCH_MANIFEST, headers=HEADERS).json()

    if platform.system() == 'Linux':
        files = ['phase_13.mf', 'phase_7.mf', 'phase_5.5.mf', 'winter_decorations.mf',
                 'phase_3.mf', 'phase_10.mf', 'phase_6.mf', 'phase_9.mf', 'TTRGame.vlt',
                 'winter_snow.mf', 'phase_5.mf', 'phase_3.5.mf', 'phase_8.mf', 'phase_11.mf',
                 'phase_12.mf', 'phase_4.mf', 'TTREngine', 'winter_music.mf']
    else:
        print("\nunsupported platform :(")
        os._exit(0)

    for file in files:
        update_file(file, manifest)

    os.chmod('TTREngine', os.stat('TTREngine').st_mode | stat.S_IEXEC | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)

def login():
    params = {'username': username, 'password': password}

    response = requests.post(LOGIN_API, params=params, headers=HEADERS).json()

    if response["success"] == "false":
        print("login failed: {}".format(response["banner"]))
        os._exit(0)

    elif response["success"] == "delayed":
        print("game entrance delay detected")
        print("the server should have you ready to go in {} seconds.".format(response["eta"]))
        delay(response["queueToken"])

    elif response["success"] == "partial":
        print("enter the ToonGuard code that was just emailed to you.")
        guard = input("> ")
        params['appToken'] = guard
        params['authToken'] = response['responseToken']
        response = requests.post(LOGIN_API, params=params, headers=HEADERS).json()

        if response["success"] == "true":
            launch(response["cookie"], response["gameserver"])
        elif response["success"] == "delayed":
            print("game entrance delay detected")
            print("the server should have you ready to go in {} seconds.".format(response["eta"]))
            delay(response["queueToken"])
        else:
            print("login failed: {}".format(response["banner"]))
            os._exit(0)

    elif response["success"] == "true":
        launch(response["cookie"], response["gameserver"])

def launch(cookie, server):
    print("you're good to go. launching the game...")
    os.environ['TTR_PLAYCOOKIE'] = cookie
    os.environ['TTR_GAMESERVER'] = server
    subprocess.call('./TTREngine')

def delay(token):
    params = {'username': username, 'password': password, 'queueToken': token}
    delayed = True
    while delayed:
        time.sleep(2)
        print("still trying...")
        response = requests.post(LOGIN_API, params=params, headers=HEADERS).json()
        if response["success"] == "true":
            launch(response["cookie"], response["gameserver"])
            delayed = False
        else:
            print("launch failed: {}".format(response["banner"]))
            os._exit(0)

if __name__ == "__main__":
    print("ttr-linux-cli by reindeer-cafe, tgsm\n")
    check_for_updates()
    print("game is up to date!\n")

    if len(sys.argv) < 3:
        username = input("username: ")
        password = getpass("password: ")
    else:
        username = sys.argv[1]
        password = sys.argv[2]

    login()
